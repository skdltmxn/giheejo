G.IHee.Jo Coding Convention

이 프로젝트를 위해 작성되는 모든 코드는 다음 규칙을 따르는 것을 원칙으로 한다.
만일 아래 규칙 중 어느 것에도 해당되지 않는 코드를 작성해야할 경우, 혹은 규칙이 불합리하다고
판단하는 사람이 많을 경우 팀 내부적으로 논의를 통해 규칙을 추가/수정하도록 한다.


1. Coding Style

다음은 코드 작성시 전반적으로 유의해야할 사항에 대한 내용이다.

(1) Tab 길이는 공백 4칸으로 한다.

(2) 연산자의 양옆에 공백을 둔다.
    ex) a=1; (x) -> a = 1; (o)
	a=b-1; (x) -> a = b - 1; (o)
	a+=10; (x) -> a += 10; (o)
	a=b>10?a:b; (x) -> a = b > 10 ? a : b; (o)

(3) if, for문 등에 쓰이는 괄호는 한칸을 띄고 쓴다.
    ex) if(1) (x) -> if (1) (o)
	for(i = 0; i < 10; i++) (x) -> for (i = 0; i < 10; i++) (o)
	while(1) (x) -> while (1) (o)

(4) 함수 호출시 괄호는 띄어쓰기를 하지 않는다.
    ex) func (param1, param2); (x) -> func(param1, param2); (o)

(5) 중괄호는 다음 줄에 쓴다.
    ex) if (a == 10) {
	    b -= 5;
	}  (x)

	if (a == 10)
	{
	    b -= 5;
	}  (o)

	int func(int a, char b) {
	    ...
	}  (x)

	int func(int a, char b)
	{
	    ...
	}  (o)

(6) 포인터 선언시 *는 변수명에 붙인다.
    ex) char* a; / char * a; (x) -> char *a; (o)

(7) 괄호 안의 시작과 끝엔 띄어쓰기를 하지 않는다.
    ex) func( "param" ); (x) -> func("param"); (o)
        if ( i > 10 ) (x) -> if (i > 10) (o)

2. Naming

다음은 변수, 함수 등의 이름을 정할 때 유의해야할 사항에 대한 내용이다.
Naming에는 절대적인 기준이 없기 때문에 다음 사항을 참고하여 적절히 판단하도록 한다.

(1) 임시적으로 쓰이는 것이 아니라면 간단하면서도 직관적으로 정하도록 한다.
    여기서 직관적이라는 말의 의미는 해당 변수나 함수의 이름을 보고 어떤 용도로
    쓰이는지등을 쉽게 유추할 수 있다는 의미로 볼 수 있다.
    하지만 그렇다고 이름을 너무 길거나 복잡하게 짓는다면 오히려 가독성을 망치게 된다.
    가령 실행 파일의 전체 section의 개수를 저장하는 변수를 선언한다고 한다면,
	int tsc;
    보다는 
	int total_section;
    혹은 
	int nr_total_section;
    등이 조금 더 직관적일 것이다. 그러나
	int number_of_total_section_in_executable;
    와 같은 이름은 오히려 가독성을 해칠 위험이 있다.

(2) 두 단어 이상으로 이루어진 이름의 각 단어는 '_'으로 연결한다.
    ex) int add_new_section(...) /* 새로운 section을 추가하는 함수 */